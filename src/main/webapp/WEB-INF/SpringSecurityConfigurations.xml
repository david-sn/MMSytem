<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

<!--    enable web security to begin with 
    <http use-expressions="true">
        <intercept-url pattern="/users**" access="hasRole('ROLE_ADMIN')" />
        <form-login login-page="/user-login" />
        <logout invalidate-session="true" logout-url="/logout" logout-success-url="/user-login"/>
    </http>  
    
    
    <authentication-manager>
        <authentication-provider>
            encrypt user password with bcrypt AlgorithmC
            <password-encoder hash="bcrypt"/>
            
            jdbc-user-service is for get dynamic users and role from database 
            <jdbc-user-service data-source-ref="dataSource" 
                               authorities-by-username-query="select users.username,Roles.roleName from users  
                                                              join user_role on users.user_dbid = user_role.user_dbid 
                                                              join roles on roles.role_dbid=user_role.role_dbid 
                                                              where users.username=?  " 
                               users-by-username-query="select users.username,users.userpassword,userEnable from users where users.username=?"
            />
            
            
            To add some static users for test
                        <user-service>
                <user name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN" />
            </user-service>
        </authentication-provider>
    </authentication-manager> 
    
    
    pre Authorize propelm is test delete delete admin blog by url or user delete blog for another user
    <global-method-security pre-post-annotations="enabled"/>
    -->
</beans:beans>